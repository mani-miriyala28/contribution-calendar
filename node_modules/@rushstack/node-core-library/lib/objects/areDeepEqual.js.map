{"version":3,"file":"areDeepEqual.js","sourceRoot":"","sources":["../../src/objects/areDeepEqual.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAM3D,oCAuDC;AA3DD;;;GAGG;AACH,SAAgB,YAAY,CAAU,CAAU,EAAE,CAAU;IAC1D,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QACZ,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,CAAC;QACN,MAAM,KAAK,GAAW,OAAO,CAAC,CAAC;QAC/B,MAAM,KAAK,GAAW,OAAO,CAAC,CAAC;QAE/B,IAAI,KAAK,KAAK,KAAK,EAAE,CAAC;YACpB,OAAO,KAAK,CAAC;QACf,CAAC;aAAM,CAAC;YACN,IAAI,KAAK,KAAK,QAAQ,EAAE,CAAC;gBACvB,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;oBAC7B,sFAAsF;oBACtF,OAAO,KAAK,CAAC;gBACf,CAAC;qBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC5B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;wBAC/C,OAAO,KAAK,CAAC;oBACf,CAAC;yBAAM,CAAC;wBACN,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;4BAC1C,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gCAC9B,OAAO,KAAK,CAAC;4BACf,CAAC;wBACH,CAAC;wBAED,OAAO,IAAI,CAAC;oBACd,CAAC;gBACH,CAAC;qBAAM,CAAC;oBACN,MAAM,iBAAiB,GAAgB,IAAI,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9E,MAAM,iBAAiB,GAAgB,IAAI,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9E,IAAI,iBAAiB,CAAC,IAAI,KAAK,iBAAiB,CAAC,IAAI,EAAE,CAAC;wBACtD,OAAO,KAAK,CAAC;oBACf,CAAC;yBAAM,CAAC;wBACN,KAAK,MAAM,QAAQ,IAAI,iBAAiB,EAAE,CAAC;4BACzC,IAAI,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;gCACvC,IACE,CAAC,YAAY,CACV,CAA6B,CAAC,QAAQ,CAAC,EACvC,CAA6B,CAAC,QAAQ,CAAC,CACzC,EACD,CAAC;oCACD,OAAO,KAAK,CAAC;gCACf,CAAC;4BACH,CAAC;iCAAM,CAAC;gCACN,OAAO,KAAK,CAAC;4BACf,CAAC;wBACH,CAAC;wBAED,OAAO,iBAAiB,CAAC,IAAI,KAAK,CAAC,CAAC;oBACtC,CAAC;gBACH,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * Determines if two objects are deeply equal.\n * @public\n */\nexport function areDeepEqual<TObject>(a: TObject, b: TObject): boolean {\n  if (a === b) {\n    return true;\n  } else {\n    const aType: string = typeof a;\n    const bType: string = typeof b;\n\n    if (aType !== bType) {\n      return false;\n    } else {\n      if (aType === 'object') {\n        if (a === null || b === null) {\n          // We already handled the case where a === b, so if either is null, they are not equal\n          return false;\n        } else if (Array.isArray(a)) {\n          if (!Array.isArray(b) || a.length !== b.length) {\n            return false;\n          } else {\n            for (let i: number = 0; i < a.length; ++i) {\n              if (!areDeepEqual(a[i], b[i])) {\n                return false;\n              }\n            }\n\n            return true;\n          }\n        } else {\n          const aObjectProperties: Set<string> = new Set(Object.getOwnPropertyNames(a));\n          const bObjectProperties: Set<string> = new Set(Object.getOwnPropertyNames(b));\n          if (aObjectProperties.size !== bObjectProperties.size) {\n            return false;\n          } else {\n            for (const property of aObjectProperties) {\n              if (bObjectProperties.delete(property)) {\n                if (\n                  !areDeepEqual(\n                    (a as Record<string, unknown>)[property],\n                    (b as Record<string, unknown>)[property]\n                  )\n                ) {\n                  return false;\n                }\n              } else {\n                return false;\n              }\n            }\n\n            return bObjectProperties.size === 0;\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n}\n"]}